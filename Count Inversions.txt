https://www.youtube.com/watch?v=kQ1mJlwW-c0

long long int merge(long long int arr[],long long int temp[],long long int left,long long int mid,long long int right)
{
    
    long long int i, j, k; 
    long long int inv_count = 0; 
    i = left; /* i is index for left subarray*/
    j = mid; /* j is index for right subarray*/
    k = left; /* k is index for resultant merged subarray*/
    while ((i <= mid - 1) && (j <= right)) { 
        if (arr[i] <= arr[j]) { 
            temp[k] = arr[i];
            i++;
            k++;
        } 
        else { 
            temp[k] = arr[j];
            k++;
            j++;
  
            /* this is tricky -- see above  
            explanation/diagram for merge()*/
            inv_count = inv_count + (mid - i); 
        } 
    } 
  
    /* Copy the remaining elements of left subarray  
(if there are any) to temp*/
    while (i <= mid - 1) 
    {
        temp[k] = arr[i];
        k++;
        i++;
    }
  
    /* Copy the remaining elements of right subarray  
(if there are any) to temp*/
    while (j <= right) 
    {
        temp[k] = arr[j]; 
        j++;
        k++;        
    }
    /*Copy back the merged elements to original array*/
    for (i = left; i <= right; i++) 
        arr[i] = temp[i]; 
  
    return inv_count; 
} 
 
long long int mergesort(long long int a[],long long int temp[],long long int l,long long int r)
{
    long long int c=0;
    if(l<r)
    {
        long long int m=(l+r)/2;
        c=c+mergesort(a,temp,l,m);
        c=c+mergesort(a,temp,m+1,r);
        c=c+merge(a,temp,l,m+1,r);
    }   
    return c;
}
 long long int inversionCount(long long int a[], long long int n)
{
    // Your Code Here
    long long int temp[n];
    return mergesort(a,temp,0,n-1);
    
}
